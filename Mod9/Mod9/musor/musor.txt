 try
        {
          //  Console.WriteLine("Выберите способ для вызова делегата 1 или 2"); 
          //  byte Num = byte.Parse(Console.ReadLine());

            MyDelegate f1 = F2;
            f1 += F3;

            f1 -= F3;
            int p = f1.Invoke(10, 7);
           
           Console.ReadKey();
        }

        catch (Exception ex)
        {

            Console.WriteLine(ex.GetType());
        }
    }

    public delegate int MyDelegate(int x, int y);


    static int F2(int x, int y)
    {
        Console.WriteLine("Разноасть {0}", x-y);
        return x - y;
    }
    static int F3(int x, int y)
    {
        Console.WriteLine("Сумма {0}", x + y);
        return x + y;
    }



    ////////////////////////////////////

        Func<int,int,int,int> Addition = Sum;
        int result = Addition(10, 20,40);
        Console.WriteLine(result);
        ///////
        Action showMessageDelegate = ShowMessage;
        showMessageDelegate.Invoke();
        Console.WriteLine();
        /////
        Predicate<string> checkLengthDelegate = CheckLength;
        bool status = checkLengthDelegate.Invoke("skill_factory");
        Console.WriteLine(status);


        /////////////////////////////////
        ///
        GreetingsDelegate gd = new GreetingsDelegate(Program.Greetings);
        string GreetingsMessage = gd.Invoke("Будущий гуру");
        Console.WriteLine(GreetingsMessage);
        Console.ReadKey();
    }

    static void ShowMessage()
    {
        Console.WriteLine("Hello World!");
    }

    static int Sum(int a, int b, int c)
    {
        return a + b + c;
    }

    static bool CheckLength(string _row)
    {
        if (_row.Length > 3) return true;
        return false;
    }
    public delegate string GreetingsDelegate(string name);
    public static string Greetings(string name)
    {
        return "Привет @" + name + "! Добро пожаловать на SkillFactory!";
    }

    //////////////////////
    static void Main(string[] args)
    {
        RandomNumberDelegate randomNumberDelegate = delegate  //реализация анонимного метода 
        {
            return new Random().Next(0, 100);
        };
        int result = randomNumberDelegate.Invoke();
        Console.WriteLine(result);
        Console.Read();
    }

    static int RandomNumber()
    {
        return new Random().Next(0, 100);
    }
    ////////////////////////////////////////////


  static void Main(string[] args)
    {
        LexusInfo lexus = BuildLexus;
        Car C = lexus("RX");             //-ковариантность
        Console.WriteLine(C.Model);




        ParentInform parent = ParentInfo; ///-контравариантности
        parent.Invoke(new Child());

        Console.Read();

    }

    public delegate Lexus LexusInfo(string name); //

    public delegate void ParentInform(Child children); ///
    private static Lexus BuildLexus(string model) //
    {
        return new Lexus { Model = model };
    }
    ///
    public static void ParentInfo(Parent parent)
    {
        Console.WriteLine(parent);
    }

}
class Car
{
    public string Model { get; set; }
}
class Lexus : Car {

  

}
class Parent { }
class Child : Parent { }
////////////////////////////////////////////////////////////





        NumReader numReader = new NumReader();
        numReader.NumEnterEvent += ShowNumber;
        try
        {
            
            numReader.Read();
        }
        catch (FormatException)
        {
            Console.WriteLine("Введено некорректное значение");
        }
    }
    static void ShowNumber(int num)
    {
       switch(num)
        {
            case 1: Console.WriteLine("Введено значение 1"); break;

            case 2: Console.WriteLine("Введено значение 2"); break;

        }
    
    }



}

class NumReader
{
    public delegate void NumberEnter(int value);    

    public  event NumberEnter NumEnterEvent; 

   public void Read()
    {
        Console.WriteLine();
        Console.WriteLine("Введите значение либо 1, либо 2:");
        
        int num = int.Parse(Console.ReadLine());    
        if (num != 1 && num !=2) { throw new FormatException(); }
        NumberEntered(num);
    }
    protected virtual void NumberEntered(int number)
    {
        NumEnterEvent?.Invoke(number);
    }


