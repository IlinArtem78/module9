 try
        {
          //  Console.WriteLine("Выберите способ для вызова делегата 1 или 2"); 
          //  byte Num = byte.Parse(Console.ReadLine());

            MyDelegate f1 = F2;
            f1 += F3;

            f1 -= F3;
            int p = f1.Invoke(10, 7);
           
           Console.ReadKey();
        }

        catch (Exception ex)
        {

            Console.WriteLine(ex.GetType());
        }
    }

    public delegate int MyDelegate(int x, int y);


    static int F2(int x, int y)
    {
        Console.WriteLine("Разноасть {0}", x-y);
        return x - y;
    }
    static int F3(int x, int y)
    {
        Console.WriteLine("Сумма {0}", x + y);
        return x + y;
    }



    ////////////////////////////////////

        Func<int,int,int,int> Addition = Sum;
        int result = Addition(10, 20,40);
        Console.WriteLine(result);
        ///////
        Action showMessageDelegate = ShowMessage;
        showMessageDelegate.Invoke();
        Console.WriteLine();
        /////
        Predicate<string> checkLengthDelegate = CheckLength;
        bool status = checkLengthDelegate.Invoke("skill_factory");
        Console.WriteLine(status);


        /////////////////////////////////
        ///
        GreetingsDelegate gd = new GreetingsDelegate(Program.Greetings);
        string GreetingsMessage = gd.Invoke("Будущий гуру");
        Console.WriteLine(GreetingsMessage);
        Console.ReadKey();
    }

    static void ShowMessage()
    {
        Console.WriteLine("Hello World!");
    }

    static int Sum(int a, int b, int c)
    {
        return a + b + c;
    }

    static bool CheckLength(string _row)
    {
        if (_row.Length > 3) return true;
        return false;
    }
    public delegate string GreetingsDelegate(string name);
    public static string Greetings(string name)
    {
        return "Привет @" + name + "! Добро пожаловать на SkillFactory!";
    }

    //////////////////////
    static void Main(string[] args)
    {
        RandomNumberDelegate randomNumberDelegate = delegate  //реализация анонимного метода 
        {
            return new Random().Next(0, 100);
        };
        int result = randomNumberDelegate.Invoke();
        Console.WriteLine(result);
        Console.Read();
    }

    static int RandomNumber()
    {
        return new Random().Next(0, 100);
    }
    ////////////////////////////////////////////


        static void Main(string[] args)
    {

        CarDelegate carDelegate;
        carDelegate = BuildBMW; // ковариантность
        Car c = carDelegate("X6");
        Console.WriteLine(c.Model);
        Console.Read();

        ShowMessageDelegate showMessageDelegate = (string _message) =>
            {
                Console.WriteLine(_message);
            };
            showMessageDelegate.Invoke("Hello World!");
            Console.Read();
        
    }

    delegate Car CarDelegate(string name);

    private static BMW BuildBMW(string model)
    {
        return new BMW { Model = model };
    }



}
class Car
{
    public string Model { get; set; }
}
class BMW : Car { }

///////////////////////////////////////////////////////////////////////////
class Program
{
    
    static void Main(string[] args)
    {

        BwmInfo bmwInfo = GetCarInfo; // контравариантность
        BMW bwm = new BMW
        {
            Model = "X6"
        };
        bmwInfo(bwm);
        Console.Read();

    }

    delegate void BwmInfo(BMW bwm);




    private static void GetCarInfo(Car p)
    {
        Console.WriteLine(p.Model);
    }

}
class Car
{
    public string Model { get; set; }
}
class BMW : Car {}
////////////////////////////////////////////////////////////

